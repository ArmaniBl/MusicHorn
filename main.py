import os
import telebot
import requests
import schedule
import time
import logging
from database import *
from dotenv import load_dotenv
from yandex_music import Client
from telebot import types
from requests.exceptions import ProxyError, ConnectionError
from urllib3.exceptions import MaxRetryError
from http.client import RemoteDisconnected

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1019214619"))
yandex_client = Client(os.getenv("YANDEX_MUSIC_TOKEN")).init()

# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤
SLOT_PRICES = {
    1: 10,  # 10 —Ä—É–±–ª–µ–π –∑–∞ 1 —Å–ª–æ—Ç
    3: 25,  # 25 —Ä—É–±–ª–µ–π –∑–∞ 3 —Å–ª–æ—Ç–∞
    5: 40   # 40 —Ä—É–±–ª–µ–π –∑–∞ 5 —Å–ª–æ—Ç–æ–≤
}

PAYMENT_INFO = """
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
–°–±–µ—Ä–±–∞–Ω–∫: 5469 9804 7424 060
–¢–∏–Ω—å–∫–æ—Ñ—Ñ: 4377 7278 1980 1759
–°–ë–ü: +7 (951) 107-82-24
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @ArmaniB
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
@bot.message_handler(commands=["start"])
def start(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    add_user(message.from_user.id)
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø MusicHorn. –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
    show_main_menu(message.chat.id, welcome_text)


@bot.callback_query_handler(func=lambda call: call.data.startswith("artist_info:"))
def handle_artist_info(call):
    try:
        _, artist_id, platform = call.data.split(":")
        logger.info(f"Fetching artist info for artist_id={artist_id}, platform={platform}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–∏—Å—Ç–µ
        artist_info = get_artist_info(artist_id, platform)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if artist_info is None:
            bot.answer_callback_query(call.id, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            bot.send_message(call.message.chat.id, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        formatted_info = (
            f"üé§ –ê—Ä—Ç–∏—Å—Ç: {artist_info['name']}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {artist_info['followers']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {artist_info['link']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=2)
        unsubscribe_button = types.InlineKeyboardButton(
            "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"unsubscribe:{artist_id}:{platform}"
        )
        last_release_button = types.InlineKeyboardButton(
            "üéµ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑",
            callback_data=f"last_release:{artist_id}:{platform}"
        )
        top_tracks_button = types.InlineKeyboardButton(
            "üéº –¢–æ–ø 10 –ø–µ—Å–µ–Ω",
            callback_data=f"top_tracks:{artist_id}:{platform}"
        )
        back_button = types.InlineKeyboardButton(
            "üîô –ö —Å–ø–∏—Å–∫—É –∞—Ä—Ç–∏—Å—Ç–æ–≤",
            callback_data="view_subscriptions"
        )
        
        markup.add(unsubscribe_button, last_release_button)
        markup.add(top_tracks_button)
        markup.add(back_button)

        bot.edit_message_text(
            formatted_info,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"Error in handle_artist_info: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–∏—Å—Ç–µ.")


def get_artist_info(artist_id, platform):
    if platform == "Spotify":
        return get_spotify_artist_info(artist_id)
    elif platform == "Yandex Music":
        return get_yandex_artist_info(artist_id)
    else:
        logger.error(f"Unsupported platform: {platform}")
        return None

def format_artist_info(artist_info):
    if artist_info:
        return (
            f"üé∂ –ò–º—è: {artist_info['name']}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {artist_info['followers']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {artist_info['link']}"
        )
    return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."



def get_spotify_artist_info(artist_id):
    try:
        token = get_spotify_token()
        if not token:
            logger.error("Spotify token is missing or invalid.")
            return None

        url = f"https://api.spotify.com/v1/artists/{artist_id}"
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            data = response.json()
            logger.info(f"Spotify API response: {data}")  # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return {
                "name": data["name"],
                "followers": data["followers"]["total"],
                "link": data["external_urls"]["spotify"]
            }
        else:
            logger.error(f"Spotify API error: {response.status_code}, {response.text}")
    except Exception as e:
        logger.error(f"Error in get_spotify_artist_info: {e}")
    return None

def get_yandex_artist_info(artist_id):
    try:
        artist = yandex_client.artists(artist_id)[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        logger.info(f"Yandex artist data: {artist}")  # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return {
            "name": artist.name,
            "followers": "N/A",
            "link": f"https://music.yandex.ru/artist/{artist_id}"
        }
    except Exception as e:
        logger.error(f"Error in get_yandex_artist_info: {e}")
    return None

# –î–ª—è Spotify
def test_spotify_artist(artist_id):
    token = get_spotify_token()
    if not token:
        print("–¢–æ–∫–µ–Ω Spotify –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        return
    url = f"https://api.spotify.com/v1/artists/{artist_id}"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        print("–ê—Ä—Ç–∏—Å—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ Spotify.")
    else:
        print(f"–ê—Ä—Ç–∏—Å—Ç —Å ID {artist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Spotify.")

# –î–ª—è Yandex Music
def test_yandex_artist(artist_id):
    try:
        artist = yandex_client.artists(artist_id)
        if artist:
            print("–ê—Ä—Ç–∏—Å—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ Yandex Music.")
        else:
            print(f"–ê—Ä—Ç–∏—Å—Ç —Å ID {artist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Yandex Music.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–∞ Yandex Music: {e}")


def check_spotify_token():
    token = get_spotify_token()
    if not token:
        print("–¢–æ–∫–µ–Ω Spotify –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        return False

    url = "https://api.spotify.com/v1/me"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        print("–¢–æ–∫–µ–Ω Spotify –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        return True
    else:
        print(f"–¢–æ–∫–µ–Ω Spotify –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")
        return False


@bot.callback_query_handler(func=lambda call: call.data.startswith("unsubscribe:"))
def handle_unsubscribe(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        _, artist_id, platform = call.data.split(":")

        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ artist_id
        remove_subscription(call.from_user.id, artist_id=artist_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.answer_callback_query(call.id, f"‚ùå –¢—ã –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏—à—å –∑–∞ —ç—Ç–∏–º –∞—Ä—Ç–∏—Å—Ç–æ–º –Ω–∞ {platform}.")
        bot.delete_message(call.message.chat.id, call.message.message_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    except Exception as e:
        logger.error(f"Error in handle_unsubscribe: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ Spotify
def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {
        "grant_type": "client_credentials",
        "client_id": SPOTIFY_CLIENT_ID,
        "client_secret": SPOTIFY_CLIENT_SECRET
    }
    response = requests.post(url, headers=headers, data=data)
    return response.json().get("access_token")


@bot.callback_query_handler(func=lambda call: call.data.startswith("last_release:"))
def handle_last_release(call):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    _, artist_id, platform = call.data.split(":")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã
    if platform == "Spotify":
        album, single = get_spotify_last_releases(artist_id)
    elif platform == "Yandex Music":
        album, single = get_yandex_last_releases(artist_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üéµ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã:\n\n"

    if album:
        message_text += (
            "üìÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª—å–±–æ–º:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {album['name']}\n"
            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {album.get('release_date', 'N/A')}\n"
            f"–°—Å—ã–ª–∫–∞: {album.get('link', 'N/A')}\n\n"
        )

    if single:
        message_text += (
            "üíø –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–Ω–≥–ª:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {single['name']}\n"
            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {single.get('release_date', 'N/A')}\n"
            f"–°—Å—ã–ª–∫–∞: {single.get('link', 'N/A')}"
        )

    if not album and not single:
        message_text = "‚ùå –†–µ–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ç–∏—Å—Ç—É",
        callback_data=f"artist_info:{artist_id}:{platform}"
    )
    markup.add(back_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, message_text, reply_markup=markup)
    bot.answer_callback_query(call.id)

def get_spotify_last_releases(artist_id):
    token = get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª—å–±–æ–º
    album_params = {"limit": 1, "include_groups": "album"}
    album_response = requests.get(
        f"https://api.spotify.com/v1/artists/{artist_id}/albums",
        headers=headers,
        params=album_params
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–Ω–≥–ª
    single_params = {"limit": 1, "include_groups": "single"}
    single_response = requests.get(
        f"https://api.spotify.com/v1/artists/{artist_id}/albums",
        headers=headers,
        params=single_params
    )

    album = None
    single = None

    if album_response.status_code == 200:
        albums = album_response.json().get("items", [])
        if albums:
            album = {
                "name": albums[0]["name"],
                "release_date": albums[0].get("release_date", "N/A"),
                "link": albums[0]["external_urls"]["spotify"]
            }

    if single_response.status_code == 200:
        singles = single_response.json().get("items", [])
        if singles:
            single = {
                "name": singles[0]["name"],
                "release_date": singles[0].get("release_date", "N/A"),
                "link": singles[0]["external_urls"]["spotify"]
            }

    return album, single

def get_yandex_last_releases(artist_id):
    try:
        artist = yandex_client.artists(artist_id)[0]
        albums = []
        singles = []

        for release in artist.get_albums():
            if release.type == 'single':
                singles.append(release)
            else:
                albums.append(release)

        album = None
        single = None

        if albums:
            latest_album = albums[0]
            album = {
                "name": latest_album.title,
                "release_date": latest_album.release_date if latest_album.release_date else "N/A",
                "link": f"https://music.yandex.ru/album/{latest_album.id}"
            }

        if singles:
            latest_single = singles[0]
            single = {
                "name": latest_single.title,
                "release_date": latest_single.release_date if latest_single.release_date else "N/A",
                "link": f"https://music.yandex.ru/album/{latest_single.id}"
            }

        return album, single
    except Exception as e:
        logger.error(f"Error in get_yandex_last_releases: {e}")
        return None, None

# –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ Spotify
def search_artist(artist_name):
    token = get_spotify_token()
    url = "https://api.spotify.com/v1/search"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"q": artist_name, "type": "artist", "limit": 1}
    response = requests.get(url, headers=headers, params=params)
    return response.json()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞
def get_new_releases(artist_id):
    token = get_spotify_token()
    url = f"https://api.spotify.com/v1/artists/{artist_id}/albums"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"limit": 5, "include_groups": "album,single"}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–ª—å–±–æ–º–æ–≤/—Å–∏–Ω–≥–ª–æ–≤
    response = requests.get(url, headers=headers, params=params)
    return response.json().get("items", [])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /track
@bot.message_handler(commands=["track"])
def track_artist(message):
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞: /track Billie Eilish")
        return

    artist_name = " ".join(args)
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    markup = types.InlineKeyboardMarkup(row_width=2)
    spotify_btn = types.InlineKeyboardButton("Spotify", callback_data=f"choose_platform:Spotify:{artist_name}")
    yandex_btn = types.InlineKeyboardButton("Yandex Music", callback_data=f"choose_platform:Yandex Music:{artist_name}")
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")
    markup.add(spotify_btn, yandex_btn, back_btn)
    
    bot.reply_to(
        message, 
        "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", 
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_platform:"))
def handle_platform_choice(call):
    try:
        _, platform, artist_name = call.data.split(":", 2)
        
        if not can_add_subscription(call.from_user.id):
            vip_level = get_vip_level(call.from_user.id)
            max_subs = get_max_subscriptions(call.from_user.id)
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫!\n"
                f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {vip_level}\n"
                f"–ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–ø–∏—Å–æ–∫: {max_subs}\n"
                f"–ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.",
                call.message.chat.id,
                call.message.message_id
            )
            show_main_menu(call.message.chat.id)
            return

        if platform == "Spotify":
            result = search_artist(artist_name)
            if result.get("artists", {}).get("items"):
                artist = result["artists"]["items"][0]
                artist_id = artist["id"]
                
                if has_subscription(call.from_user.id, artist_id):
                    bot.answer_callback_query(call.id)
                    bot.edit_message_text(
                        f"‚ùå –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {artist['name']} –≤ Spotify!",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    show_main_menu(call.message.chat.id)
                    return
                    
                artist_name = artist["name"]
                add_subscription(call.from_user.id, artist_id, artist_name, platform="Spotify")
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    f"üé§ –¢–µ–ø–µ—Ä—å —Ç—ã —Å–ª–µ–¥–∏—à—å –∑–∞ {artist_name} –Ω–∞ Spotify!\n"
                    f"–°—Å—ã–ª–∫–∞: {artist['external_urls']['spotify']}\n\n"
                    f"–ü–æ–¥–ø–∏—Å–æ–∫: {len(get_subscriptions(call.from_user.id))}/{get_max_subscriptions(call.from_user.id)}",
                    call.message.chat.id,
                    call.message.message_id
                )
            else:
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    f"‚ùå –ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Spotify.",
                    call.message.chat.id,
                    call.message.message_id
                )
        elif platform == "Yandex Music":
            artist = search_yandex_artist(artist_name)
            if artist:
                artist_id = artist.id
                
                if has_subscription(call.from_user.id, str(artist_id)):
                    bot.answer_callback_query(call.id)
                    bot.edit_message_text(
                        f"‚ùå –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {artist.name} –≤ Yandex Music!",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    show_main_menu(call.message.chat.id)
                    return
                    
                artist_name = artist.name
                add_subscription(call.from_user.id, artist_id, artist_name, platform="Yandex Music")
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    f"üé§ –¢–µ–ø–µ—Ä—å —Ç—ã —Å–ª–µ–¥–∏—à—å –∑–∞ {artist_name} –Ω–∞ Yandex Music!\n"
                    f"–°—Å—ã–ª–∫–∞: https://music.yandex.ru/artist/{artist_id}\n\n"
                    f"–ü–æ–¥–ø–∏—Å–æ–∫: {len(get_subscriptions(call.from_user.id))}/{get_max_subscriptions(call.from_user.id)}",
                    call.message.chat.id,
                    call.message.message_id
                )
            else:
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    f"‚ùå –ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Yandex Music.",
                    call.message.chat.id,
                    call.message.message_id
                )
        
        show_main_menu(call.message.chat.id)
        
    except Exception as e:
        logger.error(f"Error in handle_platform_choice: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_artists
@bot.message_handler(commands=["my_artists"])
def list_artists(message):
    subscriptions = get_subscriptions(message.from_user.id)

    if subscriptions:
        markup = types.InlineKeyboardMarkup()

        for sub in subscriptions:
            # Ensure sub has at least 3 elements
            if len(sub) >= 3:
                artist_id = sub[0]  # ID –∞—Ä—Ç–∏—Å—Ç–∞
                artist_name = sub[1]  # –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
                platform = sub[2]  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞

                # Create a button for each artist
                markup.add(types.InlineKeyboardButton(
                    text=f"{artist_name} ({platform})",
                    callback_data=f"artist_info:{artist_id}:{platform}"
                ))

        # –ú–µ–Ω—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions"))
        bot.send_message(message.chat.id, "üé§ –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        show_main_menu(message.chat.id)


@bot.message_handler(commands=["untrack"])
def untrack_artist(message):
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞: /untrack Billie Eilish")
        return

    artist_name = " ".join(args)
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞
    remove_subscription(message.from_user.id, artist_name=artist_name)
    bot.reply_to(message, f"‚ùå –¢—ã –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏—à—å –∑–∞ {artist_name}.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message.chat.id)

@bot.message_handler(commands=["mute"])
def mute_notifications(message):
    mute_user(message.from_user.id)
    bot.reply_to(message, "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /unmute, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=["unmute"])
def unmute_notifications(message):
    unmute_user(message.from_user.id)
    bot.reply_to(message, "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /mute, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
def check_new_releases():
    conn, cursor = get_db()
    #–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute("SELECT telegram_id FROM users WHERE muted = FALSE")
    users = cursor.fetchall()
    for user in users:
        telegram_id = user[0]
        subscriptions = get_subscriptions(telegram_id)
        for sub in subscriptions:
            artist_id = sub[1]  # artist_id
            platform = sub[3]  # platform
            if platform == "Spotify":
                new_releases = get_new_releases(artist_id)
            elif platform == "Yandex Music":
                new_releases = get_yandex_new_releases(artist_id)
            else:
                continue

            if new_releases:
                for release in new_releases:
                    if platform == "Spotify":
                        release_date = release.get("release_date", "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
                        total_tracks = release.get("total_tracks", "?")
                        message = (
                            f"üéµ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ –æ—Ç {sub[2]} –Ω–∞ Spotify!\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {release['name']}\n"
                            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {release_date}\n"
                            f"–¢—Ä–µ–∫–æ–≤: {total_tracks}\n"
                            f"–°—Å—ã–ª–∫–∞: {release['external_urls']['spotify']}"
                        )
                        if release.get("images"):
                            image_url = release["images"][0]["url"]
                            bot.send_photo(telegram_id, image_url, caption=message)
                        else:
                            bot.send_message(telegram_id, message)
                    elif platform == "Yandex Music":
                        release_date = release.date if release.date else "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                        message = (
                            f"üéµ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ –æ—Ç {sub[2]} –Ω–∞ Yandex Music!\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {release.title}\n"
                            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {release_date}\n"
                            f"–°—Å—ã–ª–∫–∞: https://music.yandex.ru/album/{release.id}"
                        )
                        bot.send_message(telegram_id, message)

# –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ Yandex Music
def search_yandex_artist(artist_name):
    try:
        search_result = yandex_client.search(artist_name, type_="artist")
        if search_result and search_result.artists:
            return search_result.artists.results[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ Yandex Music: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞ –≤ Yandex Music
def get_yandex_new_releases(artist_id):
    try:
        artist = yandex_client.artists(artist_id)
        if artist and artist.releases:
            return artist.releases  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–æ–≤ –∏–∑ Yandex Music: {e}")
        return []

@bot.message_handler(commands=["help"])
def show_help(message):
    help_text = """
    üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
    /track [–∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞] - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞—Ä—Ç–∏—Å—Ç–∞.
    /untrack [–∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞] - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞—Ä—Ç–∏—Å—Ç–∞.
    /my_artists - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫.
    /mute - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    /unmute - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    bot.reply_to(message, help_text)

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
schedule.every(1).hours.do(check_new_releases)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 1 —á–∞—Å

def show_main_menu(chat_id, message_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_to_message_id=None):
    vip_level = get_vip_level(chat_id)
    current_subs = len(get_subscriptions(chat_id))
    max_subs = get_max_subscriptions(chat_id)
    
    status_text = (
        f"üìù –ü–æ–¥–ø–∏—Å–∫–∏: {current_subs}/{max_subs}\n\n"
        f"{message_text}"
    )
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    subscriptions_btn = types.InlineKeyboardButton("üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscriptions")
    balance_btn = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="menu_balance")
    settings_btn = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    support_btn = types.InlineKeyboardButton("üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data="menu_support")
    
    markup.add(subscriptions_btn, balance_btn, settings_btn, support_btn)
    
    return bot.send_message(chat_id, status_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("menu_"))
def handle_menu(call):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if call.data == "menu_subscriptions":
            markup = types.InlineKeyboardMarkup(row_width=1)
            view_btn = types.InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="view_subscriptions")
            add_btn = types.InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="add_subscription")
            remove_btn = types.InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="remove_subscription")
            back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_main_menu")
            markup.add(view_btn, add_btn, remove_btn, back_btn)
            bot.send_message(call.message.chat.id, "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:", reply_markup=markup)

        elif call.data == "menu_balance":
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ—Ç–æ–≤
            for slots, price in SLOT_PRICES.items():
                btn_text = f"üéü –ö—É–ø–∏—Ç—å {slots} {'—Å–ª–æ—Ç' if slots == 1 else '—Å–ª–æ—Ç–∞' if 1 < slots < 5 else '—Å–ª–æ—Ç–æ–≤'} –∑–∞ {price}‚ÇΩ"
                markup.add(types.InlineKeyboardButton(
                    btn_text,
                    callback_data=f"buy_slots:{slots}"
                ))
            
            history_btn = types.InlineKeyboardButton(
                "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
                callback_data="payment_history"
            )
            back_btn = types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="show_main_menu"
            )
            
            markup.add(history_btn, back_btn)
            
            message_text = (
                f"üí´ –£—Ä–æ–≤–µ–Ω—å: {get_vip_level(call.from_user.id)}\n"
                f"üìù –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {get_max_subscriptions(call.from_user.id)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
            )
            
            bot.send_message(call.message.chat.id, message_text, reply_markup=markup)

        elif call.data == "menu_settings":
            markup = types.InlineKeyboardMarkup(row_width=1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_user_muted = is_muted(call.message.chat.id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
            if is_user_muted:
                notifications_btn = types.InlineKeyboardButton(
                    "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="unmute_notifications"
                )
            else:
                notifications_btn = types.InlineKeyboardButton(
                    "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="mute_notifications"
                )

            back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_main_menu")
            markup.add(notifications_btn, back_btn)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            status_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + ("üîï –û—Ç–∫–ª—é—á–µ–Ω—ã" if is_user_muted else "üîî –í–∫–ª—é—á–µ–Ω—ã")
            bot.send_message(call.message.chat.id, status_text, reply_markup=markup)

        elif call.data == "menu_support":
            markup = types.InlineKeyboardMarkup(row_width=1)
            back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_main_menu")
            markup.add(back_btn)
            bot.send_message(
                call.message.chat.id,
                "üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n\n"
                "–¢–∏–Ω—å–∫–æ—Ñ—Ñ: 4377 7278 1980 1759\n"
                "–°–ë–ü: +7 (951) 107-82-24",
                reply_markup=markup
            )

    except Exception as e:
        logger.error(f"Error in handle_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data == "show_main_menu")
def handle_show_main_menu(call):
    try:
        show_main_menu(call.message.chat.id)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        logger.error(f"Error in handle_show_main_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")



@bot.callback_query_handler(func=lambda call: call.data in ["view_subscriptions", "add_subscription", "remove_subscription", "mute_notifications", "unmute_notifications"])
def handle_menu_actions(call):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if call.data == "view_subscriptions":
            subscriptions = get_subscriptions(call.message.chat.id)

            if subscriptions:
                markup = types.InlineKeyboardMarkup()

                for sub in subscriptions:
                    if len(sub) >= 3:
                        artist_id = sub[0]
                        artist_name = sub[1]
                        platform = sub[2]

                        markup.add(types.InlineKeyboardButton(
                            text=f"{artist_name} ({platform})",
                            callback_data=f"artist_info:{artist_id}:{platform}"
                        ))

                # –ú–µ–Ω—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions"))
                bot.send_message(call.message.chat.id, "üé§ –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                show_main_menu(call.message.chat.id)

        elif call.data == "add_subscription":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞:")
            bot.register_next_step_handler(msg, handle_artist_name_input)

        elif call.data == "remove_subscription":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
            subscriptions = get_subscriptions(call.message.chat.id)

            if subscriptions:
                markup = types.InlineKeyboardMarkup()

                for sub in subscriptions:
                    if len(sub) >= 3:
                        artist_id = sub[0]
                        artist_name = sub[1]
                        platform = sub[2]

                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                        markup.add(types.InlineKeyboardButton(
                            text=f"‚ùå {artist_name} ({platform})",
                            callback_data=f"unsubscribe:{artist_id}:{platform}"
                        ))

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions"))
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                show_main_menu(call.message.chat.id)

        elif call.data == "mute_notifications":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ call
            mute_user(call.from_user.id)
            # –í–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            markup = types.InlineKeyboardMarkup(row_width=1)
            notifications_btn = types.InlineKeyboardButton(
                "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="unmute_notifications"
            )
            back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_query_data="show_main_menu")
            markup.add(notifications_btn, back_btn)
            status_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
            bot.send_message(call.message.chat.id, status_text, reply_markup=markup)

        elif call.data == "unmute_notifications":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ call
            unmute_user(call.from_user.id)
            markup = types.InlineKeyboardMarkup(row_width=1)
            notifications_btn = types.InlineKeyboardButton(
                "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="mute_notifications"
            )
            back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_main_menu")
            markup.add(notifications_btn, back_btn)
            status_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: üîî –í–∫–ª—é—á–µ–Ω—ã"
            bot.send_message(call.message.chat.id, status_text, reply_markup=markup)

    except Exception as e:
        logger.error(f"Error in handle_menu_actions: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def handle_artist_name_input(message):
    artist_name = message.text
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    markup = types.InlineKeyboardMarkup(row_width=2)
    spotify_btn = types.InlineKeyboardButton("Spotify", callback_data=f"choose_platform:Spotify:{artist_name}")
    yandex_btn = types.InlineKeyboardButton("Yandex Music", callback_data=f"choose_platform:Yandex Music:{artist_name}")
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")
    markup.add(spotify_btn, yandex_btn, back_btn)
    
    bot.reply_to(
        message, 
        "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", 
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("top_tracks:"))
def handle_top_tracks(call):
    try:
        _, artist_id, platform = call.data.split(":")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤
        if platform == "Spotify":
            tracks = get_spotify_top_tracks(artist_id)
        elif platform == "Yandex Music":
            tracks = get_yandex_top_tracks(artist_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        if not tracks:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üéµ –¢–æ–ø 10 –ø–µ—Å–µ–Ω:\n\n"
        for i, track in enumerate(tracks, 1):
            message_text += f"{i}. {track['name']}\n"
            if track.get('link'):
                message_text += f"üîó {track['link']}\n"
            message_text += "\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ç–∏—Å—Ç—É",
            callback_data=f"artist_info:{artist_id}:{platform}"
        )
        markup.add(back_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"Error in handle_top_tracks: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤.")

def get_spotify_top_tracks(artist_id):
    try:
        token = get_spotify_token()
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?market=US",
            headers=headers
        )
        
        if response.status_code == 200:
            tracks_data = response.json()['tracks'][:10]
            return [{
                'name': track['name'],
                'link': track['external_urls']['spotify']
            } for track in tracks_data]
        return None
    except Exception as e:
        logger.error(f"Error in get_spotify_top_tracks: {e}")
        return None

def get_yandex_top_tracks(artist_id):
    try:
        artist = yandex_client.artists(artist_id)[0]
        tracks = artist.get_tracks()[:10]
        return [{
            'name': track.title,
            'link': f"https://music.yandex.ru/track/{track.id}"
        } for track in tracks]
    except Exception as e:
        logger.error(f"Error in get_yandex_top_tracks: {e}")
        return None

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
@bot.message_handler(commands=["set_vip"])
def set_vip(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_vip <user_id>")
        return

    try:
        user_id = int(args[1])
        set_vip_level(user_id, True)
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª VIP —Å—Ç–∞—Ç—É—Å!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"Error in set_vip: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VIP —Å—Ç–∞—Ç—É—Å–∞.")

@bot.message_handler(commands=["remove_vip"])
def remove_vip(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_vip <user_id>")
        return

    try:
        user_id = int(args[1])
        set_vip_level(user_id, False)
        bot.reply_to(message, f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω!")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"Error in remove_vip: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ VIP —Å—Ç–∞—Ç—É—Å–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "menu_balance")
def handle_balance_menu(call):
    try:
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ—Ç–æ–≤
        for slots, price in SLOT_PRICES.items():
            btn_text = f"üéü –ö—É–ø–∏—Ç—å {slots} {'—Å–ª–æ—Ç' if slots == 1 else '—Å–ª–æ—Ç–∞' if 1 < slots < 5 else '—Å–ª–æ—Ç–æ–≤'} –∑–∞ {price}‚ÇΩ"
            markup.add(types.InlineKeyboardButton(
                btn_text,
                callback_data=f"buy_slots:{slots}"
            ))
        
        history_btn = types.InlineKeyboardButton(
            "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
            callback_data="payment_history"
        )
        back_btn = types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="show_main_menu"
        )
        
        markup.add(history_btn, back_btn)
        
        message_text = (
            f"üí´ –£—Ä–æ–≤–µ–Ω—å: {get_vip_level(call.from_user.id)}\n"
            f"üìù –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {get_max_subscriptions(call.from_user.id)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
        )
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            logger.info("–ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
            bot.answer_callback_query(call.id)
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"Error in handle_balance_menu: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_slots:"))
def handle_buy_slots(call):
    try:
        slots = int(call.data.split(":")[1])
        price = SLOT_PRICES.get(slots)
        
        if not price:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        request_id = create_payment_request(call.from_user.id, slots, price)
        
        message_text = (
            f"üí≥ –ü–æ–∫—É–ø–∫–∞ {slots} {'—Å–ª–æ—Ç–∞' if slots == 1 else '—Å–ª–æ—Ç–æ–≤'}\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price}‚ÇΩ\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{request_id}\n\n"
            f"{PAYMENT_INFO}\n\n"
            "‚ö†Ô∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!"
        )
        
        markup = types.InlineKeyboardMarkup()
        cancel_btn = types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="menu_balance"
        )
        markup.add(cancel_btn)
        
        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_buy_slots: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@bot.callback_query_handler(func=lambda call: call.data == "payment_history")
def handle_payment_history(call):
    try:
        payments = get_payment_history(call.from_user.id)
        
        if not payments:
            message_text = "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
        else:
            message_text = "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
            for amount, slots, status, timestamp in payments:
                status_emoji = "‚úÖ" if status == "approved" else "‚ùå" if status == "rejected" else "‚è≥"
                message_text += (
                    f"{status_emoji} {slots} {'—Å–ª–æ—Ç' if slots == 1 else '—Å–ª–æ—Ç–∞' if 1 < slots < 5 else '—Å–ª–æ—Ç–æ–≤'} "
                    f"–∑–∞ {amount}‚ÇΩ - {status}\n"
                    f"–î–∞—Ç–∞: {timestamp}\n\n"
                )
        
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É",
            callback_data="menu_balance"
        )
        markup.add(back_btn)
        
        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_payment_history: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=["payments"])
def show_pending_payments(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    payments = get_pending_payments()
    if not payments:
        bot.reply_to(message, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        return
        
    for payment_id, user_id, slots, amount, timestamp, _ in payments:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = bot.get_chat(user_id)
            user_name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "–Ω–µ—Ç username"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            approve_btn = types.InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve_payment:{payment_id}"
            )
            reject_btn = types.InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_payment:{payment_id}"
            )
            markup.add(approve_btn, reject_btn)
            
            message_text = (
                f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"–ó–∞–∫–∞–∑: #{payment_id}\n"
                f"–û—Ç: {user_name} ({username})\n"
                f"ID: {user_id}\n"
                f"–°–ª–æ—Ç–æ–≤: {slots}\n"
                f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"–î–∞—Ç–∞: {timestamp}"
            )
            
            bot.send_message(message.chat.id, message_text, reply_markup=markup)
        except Exception as e:
            logger.error(f"Error getting user info: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
            message_text = (
                f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"–ó–∞–∫–∞–∑: #{payment_id}\n"
                f"–û—Ç: ID {user_id}\n"
                f"–°–ª–æ—Ç–æ–≤: {slots}\n"
                f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"–î–∞—Ç–∞: {timestamp}"
            )
            bot.send_message(message.chat.id, message_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(("approve_payment:", "reject_payment:")))
def handle_payment_action(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
        
    action, payment_id = call.data.split(":")
    payment_id = int(payment_id)
    
    try:
        if action == "approve_payment":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = get_payment_by_id(payment_id)
            if payment:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                update_payment_request(payment_id, "approved")
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å VIP
                current_level = get_vip_level(payment[7])  # telegram_id
                set_vip_level(payment[7], current_level + payment[3])  # slots
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(
                    payment[7],  # telegram_id
                    f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ #{payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {payment[3]} {'—Å–ª–æ—Ç' if payment[3] == 1 else '—Å–ª–æ—Ç–∞' if 1 < payment[3] < 5 else '—Å–ª–æ—Ç–æ–≤'}"
                )
        else:
            update_payment_request(payment_id, "rejected")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment = get_payment_by_id(payment_id)
            if payment:
                bot.send_message(
                    payment[7],  # telegram_id
                    f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ #{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                    "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã."
                )
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )
        
        bot.answer_callback_query(call.id, "‚úÖ –ì–æ—Ç–æ–≤–æ")
        
    except Exception as e:
        logger.error(f"Error in handle_payment_action: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

# –ò–∑–º–µ–Ω–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    import threading
    
    def run_bot():
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                bot.polling(none_stop=True, timeout=60)
            except ProxyError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                time.sleep(10)
            except (ConnectionError, MaxRetryError, RemoteDisconnected) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                time.sleep(10)
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(10)
    
    def run_scheduler():
        while True:
            try:
                schedule.run_pending()
            except Exception as e:
                logger.error(f"Scheduler error: {e}")
            time.sleep(60)
    
    schedule.every(1).hours.do(check_new_releases)
    
    bot_thread = threading.Thread(target=run_bot)
    scheduler_thread = threading.Thread(target=run_scheduler)
    
    bot_thread.start()
    scheduler_thread.start()